# Medical Survey Platform - NextJS Application with TypeORM

## Project Overview
This project is a survey application for doctors built with NextJS (frontend and backend) and PostgreSQL with TypeORM. The platform allows pharmaceutical companies (clients) to create surveys for doctors to complete. Doctors earn points for completing surveys, which can be redeemed for money or other rewards.

## User Roles
1. **Doctors** - Complete surveys and earn points
2. **Representatives (Reps)** - Onboard doctors and track their activity
3. **Clients (Pharma Companies)** - Create surveys, manage reps, and view analytics
4. **Super Admin** - Manage the entire platform

## Technical Stack
- Frontend: NextJS with React
- Backend: NextJS API routes
- Database: PostgreSQL
- ORM: TypeORM
- Authentication: NextAuth.js
- Email Service: SendGrid/Nodemailer
- Styling: Tailwind CSS
- Deployment: Vercel

## Database Structure

### Entity Relationships

- **User**: Base entity for all users with common fields
  - Has one-to-one relationship with Doctor, Rep, or Client based on role
  - Fields: id, email, name, password, phone, role, status, profilePicture, createdAt, updatedAt

- **Client**: Pharmaceutical companies
  - Belongs to a User
  - Has many Representatives
  - Has many Surveys
  - Has many Doctors through DoctorClientMapping
  - Fields: id, userId, companyName, createdAt, updatedAt

- **Representative**:
  - Belongs to a User
  - Belongs to a Client
  - Has many Doctors through DoctorRepMapping
  - Fields: id, userId, clientId, createdAt, updatedAt

- **Doctor**:
  - Belongs to a User
  - Has many Clients through DoctorClientMapping
  - Has many Representatives through DoctorRepMapping
  - Has many SurveyResponses
  - Has many Redemptions
  - Fields: id, userId, specialty, totalPoints, redeemedPoints, createdAt, updatedAt

- **DoctorClientMapping**:
  - Many-to-many relationship between Doctor and Client
  - Fields: id, doctorId, clientId, createdAt

- **DoctorRepMapping**:
  - Many-to-many relationship between Doctor and Representative
  - Fields: id, doctorId, repId, createdAt

- **Survey**:
  - Belongs to a Client
  - Has many SurveyQuestions
  - Has many DoctorSurveyResponses
  - Fields: id, clientId, title, description, points, estimatedTime, status, createdAt, updatedAt

- **SurveyQuestion**:
  - Belongs to a Survey
  - Has many QuestionResponses
  - Fields: id, surveyId, questionText, questionType, options, required, orderIndex, conditionalLogic, createdAt, updatedAt

- **DoctorSurveyResponse**:
  - Belongs to a Doctor
  - Belongs to a Survey
  - Has many QuestionResponses
  - Fields: id, doctorId, surveyId, completed, pointsEarned, startedAt, completedAt

- **QuestionResponse**:
  - Belongs to a DoctorSurveyResponse
  - Belongs to a SurveyQuestion
  - Fields: id, doctorSurveyResponseId, questionId, responseData, createdAt, updatedAt

- **Redemption**:
  - Belongs to a Doctor
  - Fields: id, doctorId, points, redemptionType, redemptionDetails, status, createdAt, updatedAt

## Feature Details

### Authentication
- Separate login pages for doctors, reps, and admins/clients
- Password reset functionality
- Session management
- Role-based access control

### Doctor Onboarding
1. CSV upload for bulk onboarding (name, email, phone, optional rep)
2. Individual doctor onboarding with manual form entry
3. Email invitation to activate account
4. OTP verification option for representatives to activate accounts in person

### Client Dashboard
1. **Analytics Page**:
   - Survey completion rates
   - Doctor engagement metrics
   - Points distribution charts
   - Redemption statistics

2. **Doctors Management**:
   - CSV upload for bulk onboarding
   - Individual doctor onboarding
   - Table view of all doctors with status
   - Detailed doctor profile view showing:
     - Survey completion history
     - Points earned and redeemed
     - Rep assignments
     - Activity timeline

3. **Representatives Management**:
   - Add/edit representatives
   - Assign doctors to representatives
   - View doctor activation rates per rep

4. **Survey Management**:
   - Create new surveys with various question types:
     - Likert scale (1-5 rating)
     - Ranking questions
     - Open-ended text responses
     - Image-based questions
     - Matrix/grid questions
     - Conditional logic questions
   - Survey template library
   - Export survey data (CSV, Excel, PDF)
   - Survey targeting based on doctor attributes

### Representative Dashboard
1. **Doctor Management**:
   - View assigned doctors (active/inactive)
   - Detailed doctor activity view
   - Status tracking
   - Onboarding assistance

2. **Activation Tracking**:
   - Track conversion rate of doctor activations
   - Receive notifications for inactive doctors

### Doctor Dashboard
1. **Survey List**:
   - Available surveys with details:
     - Title
     - Completion count
     - Update/release date
     - Potential points
     - Estimated completion time

2. **Completed Surveys** section

3. **Profile Management**:
   - Update personal information
   - Profile picture upload

4. **Points Management**:
   - Total points overview
   - Points redeemed
   - Points available for redemption
   - Redemption options (UPI or Amazon wallet)
   - Transaction history

### Notification System
1. Email notifications for:
   - Doctor account activation
   - New survey availability
   - Points earned
   - Redemption status

2. In-app notifications

## Implementation Plan

### Phase 1: Setup & Authentication
1. Initialize NextJS project with TypeScript
2. Set up TypeORM with PostgreSQL database
3. Create entity classes
4. Implement authentication system with NextAuth
5. Create login pages for different user roles

### Phase 2: Core Features
1. Client dashboard development
2. Representative dashboard development
3. Doctor dashboard development
4. Survey creation system
5. Basic notification system

### Phase 3: Advanced Features
1. Analytics implementation
2. CSV import/export functionality
3. Advanced survey question types
4. Points redemption system
5. Enhanced notification system

### Phase 4: Testing & Deployment
1. Unit testing
2. Integration testing
3. User acceptance testing
4. Deployment to Vercel
5. Documentation

## Project Structure
```
/
├── app/
│   ├── api/
│   │   ├── auth/
│   │   ├── client/
│   │   ├── rep/
│   │   └── doctor/
│   ├── client/
│   ├── rep/
│   ├── doctor/
│   ├── login/
│   └── page.tsx
├── components/
│   ├── common/
│   ├── client/
│   ├── rep/
│   └── doctor/
├── entities/
│   ├── User.ts
│   ├── Client.ts
│   ├── Representative.ts
│   ├── Doctor.ts
│   ├── Survey.ts
│   └── ...
├── lib/
│   ├── database.ts
│   ├── auth.ts
│   └── utils.ts
├── public/
├── migrations/
├── services/
│   ├── UserService.ts
│   ├── SurveyService.ts
│   └── ...
├── types/
└── middleware.ts
```

## Getting Started
1. Clone the repository
2. Install dependencies: `npm install`
3. Set up environment variables in `.env.local`
4. Run the development server: `npm run dev`
5. Access the application at: http://localhost:3000

## Environment Variables
```
# Database Configuration
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=your_password
DB_DATABASE=medical_survey_db

# NextAuth Configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_generated_secret_key

# Email Configuration
EMAIL_SERVER=smtp://username:password@smtp.example.com:587
EMAIL_FROM=noreply@example.com
```

## How to Use TypeORM with NextJS

1. **Database Initialization**:
   - Initialize the database connection in `lib/database.ts`
   - Create a function to get the database connection that can be used across the application

2. **Entity Creation**:
   - Define entities in the `entities` folder
   - Use TypeORM decorators to define relationships and columns

3. **Data Access**:
   - Create service classes in the `services` folder
   - Implement repository patterns for data access

4. **API Routes**:
   - Use the services in API routes
   - Handle data validation and error handling

5. **Migration Management**:
   - Use TypeORM migrations for database schema changes
   - Execute migrations during deployment

## TypeORM Best Practices

1. Use eager relations sparingly and prefer to use query builders for complex queries
2. Implement transaction management for multi-step operations
3. Use repositories for data access
4. Implement proper error handling and logging
5. Use migrations for schema changes
6. Implement proper data validation
7. Create indexes for frequently queried fields